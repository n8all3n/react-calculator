{"version":3,"sources":["CalculatorButton.js","Calculate.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorButton","onBtnClick","_this","props","onClick","name","react_default","a","createElement","className","this","buttonType","React","Component","Calculate","inputDigit","digit","calculator","waitingForSecondOperand","displayValue","resetCalculator","firstOperand","operator","inputDecimal","includes","handleOperator","nextOperator","performCalculation","/","secondOperand","*","+","-","%","=","inputValue","parseFloat","result","String","currentValue","handlePositiveNegative","toString","App","state","onDigitClick","btnType","setState","calc","allClear","_this2","CalculatorButton_CalculatorButton","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db398f70.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class CalculatorButton extends React.Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    buttonType: PropTypes.string,\r\n    onClick: PropTypes.func\r\n  };\r\n\r\n  onBtnClick =() => {\r\n    this.props.onClick(this.props.name);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.buttonType} onClick={this.onBtnClick}>\r\n          {this.props.name}\r\n      </div>\r\n    );\r\n  }\r\n}","function inputDigit(digit, calculator) {\r\n    if (calculator.waitingForSecondOperand === true) {\r\n      calculator.displayValue = digit;\r\n      calculator.waitingForSecondOperand = false;\r\n    } else {\r\n        if (calculator.displayValue === '-0') {\r\n            calculator.displayValue = '-' + digit;\r\n        } else if (calculator.displayValue === '0') {\r\n            calculator.displayValue = digit;\r\n        } else {\r\n            calculator.displayValue = calculator.displayValue + digit;\r\n        }\r\n    }\r\n\r\n    return calculator;\r\n}\r\n\r\nfunction resetCalculator(calculator) {\r\n    calculator.displayValue = '0';\r\n    calculator.firstOperand = null;\r\n    calculator.waitingForSecondOperand = false;\r\n    calculator.operator = null;\r\n\r\n    return calculator\r\n}\r\n\r\nfunction inputDecimal(calculator) {\r\n\tif (calculator.waitingForSecondOperand === true) return;\r\n  \r\n  // If the `displayValue` does not contain a decimal point\r\n  if (!calculator.displayValue.includes('.')) {\r\n    // Append the decimal point\r\n    calculator.displayValue += '.';\r\n  }\r\n\r\n  return calculator;\r\n}\r\n\r\nfunction handleOperator(nextOperator, calculator) {\r\n    const performCalculation = {\r\n        '/': (firstOperand, secondOperand) => firstOperand / secondOperand,\r\n      \r\n        '*': (firstOperand, secondOperand) => firstOperand * secondOperand,\r\n      \r\n        '+': (firstOperand, secondOperand) => firstOperand + secondOperand,\r\n      \r\n        '-': (firstOperand, secondOperand) => firstOperand - secondOperand,\r\n\r\n        '%': (firstOperand, secondOperand) => firstOperand / 100,\r\n\r\n        '=': (firstOperand, secondOperand) => secondOperand\r\n      };\r\n\r\n\r\n    const inputValue = parseFloat(calculator.displayValue);\r\n  \r\n    if (nextOperator === '%') {\r\n        const result = performCalculation['%'](inputValue);\r\n        calculator.displayValue = String(result);\r\n        return calculator;\r\n    }\r\n\r\n    if (calculator.operator && calculator.waitingForSecondOperand)  {\r\n      calculator.operator = nextOperator;\r\n      return;\r\n    }\r\n  \r\n    if (calculator.firstOperand == null) {\r\n      calculator.firstOperand = inputValue;\r\n    } else if (calculator.operator) {\r\n      const currentValue = calculator.firstOperand || 0;\r\n      const result = performCalculation[calculator.operator](currentValue, inputValue);\r\n  \r\n      calculator.displayValue = String(result);\r\n      calculator.firstOperand = result;\r\n    }\r\n  \r\n    calculator.waitingForSecondOperand = true;\r\n    calculator.operator = nextOperator;\r\n\r\n    return calculator;\r\n  }\r\n  \r\n  \r\n  function handlePositiveNegative(calculator) {\r\n    if (calculator.waitingForSecondOperand === true) return;\r\n\r\n    if (calculator.displayValue === '0') {\r\n        calculator.displayValue = '-0';\r\n    } else {\r\n        calculator.displayValue = (-1 * parseFloat(calculator.displayValue)).toString();\r\n    }\r\n    return calculator;\r\n  }\r\n\r\n\r\nexport default {\r\n    inputDigit: inputDigit,\r\n    resetCalculator: resetCalculator,\r\n    inputDecimal: inputDecimal,\r\n    handleOperator: handleOperator,\r\n    handlePositiveNegative: handlePositiveNegative\r\n}","import React from 'react';\n\nimport './App.css';\nimport CalculatorButton from './CalculatorButton'\nimport calc from './Calculate';\n\nexport default class App extends React.Component {\n  state = {\n    displayValue: '0',\n    firstOperand: null,\n    waitingForSecondOperand: false,\n    operator: null,\n  };\n\n  onDigitClick = (btnType) => {\n    this.setState(calc.inputDigit(btnType, this.state));\n  }\n\n  allClear = () => {\n    this.setState(calc.resetCalculator(this.state));\n  }\n\n  inputDecimal = () => {\n    this.setState(calc.inputDecimal(this.state));\n  }\n\n  handleOperator = (nextOperator) => {\n    this.setState(calc.handleOperator(nextOperator, this.state));\n  }\n\n  handlePositiveNegative = () => {\n    this.setState(calc.handlePositiveNegative(this.state));\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n          <div className=\"result\">\n            <span>{this.state.displayValue}</span>\n          </div>\n          <div className=\"button-row\">\n            <CalculatorButton name=\"AC\" buttonType=\"calc-button function-button\" onClick={this.allClear} />\n            <CalculatorButton name=\"+/-\" buttonType=\"calc-button function-button\" onClick={this.handlePositiveNegative}/>\n            <CalculatorButton name=\"%\" buttonType=\"calc-button function-button\" onClick={() =>this.handleOperator('%')}/>\n            <CalculatorButton name=\"÷\" buttonType=\"calc-button orange-button\" onClick={() =>this.handleOperator('/')}/>\n          </div>\n          <div className=\"button-row\">\n            <CalculatorButton name=\"7\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"8\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"9\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"X\" buttonType=\"calc-button orange-button\" onClick={() => this.handleOperator('*')}/>\n          </div>\n          <div className=\"button-row\">\n            <CalculatorButton name=\"4\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"5\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"6\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"-\" buttonType=\"calc-button orange-button\"onClick={() =>this.handleOperator('-')} />\n          </div>\n          <div className=\"button-row\">\n            <CalculatorButton name=\"1\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"2\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"3\" buttonType=\"calc-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\"+\" buttonType=\"calc-button orange-button\" onClick={() =>this.handleOperator('+')}/>\n          </div>\n          <div className=\"button-row\">\n            <CalculatorButton name=\"0\" buttonType=\"calc-button wide-button\" onClick={this.onDigitClick}/>\n            <CalculatorButton name=\".\" buttonType=\"calc-button\" onClick={this.inputDecimal} />\n            <CalculatorButton name=\"=\" buttonType=\"calc-button orange-button\" onClick={() =>this.handleOperator('=')}/>\n          </div>\n      </div>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}